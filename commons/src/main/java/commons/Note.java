package commons;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.jetbrains.annotations.NotNull;

import java.time.LocalDateTime;
import java.util.*;

import static org.apache.commons.lang3.builder.ToStringStyle.MULTI_LINE_STYLE;

/**
 * Note entity with title, content and creation date. Stored in database.
 */
@Entity
public class Note {

    /**
     * id acts as unique identifier for the note, auto-generated by db.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    @OneToMany(mappedBy = "note",cascade = CascadeType.ALL,orphanRemoval = true)
    @JsonManagedReference
    private List<File> files=new ArrayList<>();
    /**
     * Title of the note. Cannot be null
     */
    @Column(nullable = false)
    @NotNull
    private String title;

    private String content;

    private String directory;

    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    private Set<Tag> tags;


    public Note() {
        // for object mappers
    }

    /**
     * Creates a new note with a certain title and content and sets a directory
     * @param title the title of the note
     * @param content the content of the note
     * @param directory the directory of the note
     */
    public Note(String title, String content, String directory) {
        this.title = title;
        this.content = content;
        this.directory = directory;
        this.tags= new HashSet<>();
    }

    /**
     * Creates a new note with a certain title and content and sets the default directory
     * @param title the title of the note
     * @param content the content of the note
     */
    public Note(String title, String content) {
        this.title = title;
        this.content = content;
        this.directory = "default";
        this.tags = new HashSet<>();
    }

    /**
     * checks if two notes are equal
     * @param obj object to compare with
     * @return true if the notes are equal
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Note note = (Note) o;
        return id == note.id; // compare ID
    }



    /**
     * Calculates the hash value
     * @return the hash value of the note
     */
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    /**
     * Creates a string representation of the note
     * @return a string representation of the note
     */
    @Override
    public String toString(){
        //return ToStringBuilder.reflectionToString(this, MULTI_LINE_STYLE);
        String result = "\n" + title + "\n" + content + "\n";
        return result;
    }

    public long getId(){
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getDirectory() {
        return directory;
    }

    public void setDirectory(String directory) {
        this.directory = directory;
    }

    public List<File> getFiles() {
        return files;
    }

    public void setFiles(List<File> files) {
        this.files = files;
    }

    public Set<Tag> getTags() {
        return tags;
    }
//    public void setId(int i) {
//        this.id = i;
//    }

    //    public LocalDateTime getCreationTime() {
//        return creationTime;
//    }

    public void addFile(File file){
        files.add(file);
        file.setNote(this);
    }

    public void removeFile(File file){
        files.remove(file);
        file.setNote(null);
    }
    public void setTags(Set<Tag> tags) {
        this.tags = tags;
    }
    public void addTag(Tag tag) {
        tags.add(tag);
        tag.getNotes().add(this);
    }

    public void removeTag(Tag tag) {
        tags.remove(tag);
        tag.getNotes().remove(this);
    }
}
